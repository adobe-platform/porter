#!/bin/bash -e{{ if .LogDebug }}x{{ end }}
echo "porter bootstrap BEGIN"

export PORTER_VERSION={{ .PorterVersion }}
export PORTER_SERVICE_NAME={{ .ServiceName }}
export PORTER_SERVICE_VERSION={{ .ServiceVersion }}
export PORTER_ENVIRONMENT={{ .Environment }}
{{ if .DevMode -}}
export DEV_MODE=1
{{- end }}
{{ if .LogDebug -}}
export LOG_DEBUG=1
{{- end }}

env
adduser porter-docker -u {{ .ContainerUserUid }}
echo 'OPTIONS="$OPTIONS --storage-opt dm.basesize=50G"' >> /etc/sysconfig/docker
# CIS Docker Benchmark 1.11.0 2.13
echo 'OPTIONS="$OPTIONS --disable-legacy-registry"' >> /etc/sysconfig/docker
# CIS Docker Benchmark 1.11.0 2.1
echo 'OPTIONS="$OPTIONS --icc=false"' >> /etc/sysconfig/docker
# CIS Docker Benchmark 1.12.0 2.8
echo 'OPTIONS="$OPTIONS --userland-proxy=false"' >> /etc/sysconfig/docker
{{ if .InsecureRegistry -}}
echo 'OPTIONS="$OPTIONS --insecure-registry={{ .InsecureRegistry }}"' >> /etc/sysconfig/docker
{{ end -}}

service haproxy start
service docker restart
docker version

# download porter
curl --compressed -so /usr/bin/porter {{ .PorterBinaryUrl }}
chmod +x /usr/bin/porter
porter version

porter host rsyslog --init

# Log rotation
CRONTAB_SNAPSHOT=/tmp/crontab_snapshot
crontab -l 1> $CRONTAB_SNAPSHOT || true
echo '*/2 * * * * /usr/sbin/logrotate /etc/logrotate.conf >/dev/null 2>&1' >> $CRONTAB_SNAPSHOT
crontab $CRONTAB_SNAPSHOT
crontab -l
rm $CRONTAB_SNAPSHOT

# Custom EC2 bootstrapping from the ec2-bootstrap hook
echo '' > {{ .EnvFile }}
chmod 200 {{ .EnvFile }}
{{ .EC2BootstrapScript }}
chmod 444 {{ .EnvFile }}

porter host daemon --init \
-e {{ .Environment }} \
-sn {{ .ServiceName }} \
-hm {{ .InetHealthCheckMethod }} \
-hp {{ .InetHealthCheckPath }} \
-elbs {{ .Elbs }}

# keep-alive on haproxy backends is disabled meaning lots of sockets in
# TIME_WAIT hanging around. reuse them
sysctl -w net.ipv4.netfilter.ip_conntrack_tcp_timeout_time_wait=1
sysctl -w net.ipv4.tcp_tw_reuse=1

# open up ephemeral port range for more possible connections to the backend
# https://github.com/torvalds/linux/blob/v4.1/Documentation/networking/ip-sysctl.txt#L742
sysctl -w net.ipv4.ip_local_port_range='1024 65535'
# the only port above 1024 that porter manages is haproxy
sysctl -w net.ipv4.ip_local_reserved_ports='8080'

# https://github.com/torvalds/linux/blob/v4.1/Documentation/networking/ip-sysctl.txt#L1021
sysctl -w net.ipv4.conf.all.rp_filter=1

# https://github.com/torvalds/linux/blob/v4.1/Documentation/networking/ip-sysctl.txt#L488
sysctl -w net.ipv4.tcp_slow_start_after_idle=0

# tune network buffers
sysctl -w net.core.rmem_default=65536
sysctl -w net.core.wmem_default=65536
sysctl -w net.core.rmem_max=16777216
sysctl -w net.core.wmem_max=16777216
sysctl -w net.ipv4.tcp_rmem='4096 65536 16777216'
sysctl -w net.ipv4.tcp_wmem='4096 65536 16777216'
sysctl -w net.ipv4.tcp_mem='16777216 16777216 16777216'

# A hotswap operation is identical to what happens during initial configuration
echo "installing service payload"
/usr/bin/porter_hotswap

echo "porter bootstrap END"
