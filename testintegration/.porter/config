service_name: porter-test

porter_version: vBCOOK

slack:
  # pack_success_webhook_url: ${SLACK_WEBHOOK_URL}
  pack_failure_webhook_url: ${SLACK_WEBHOOK_URL}

  # provision_success_webhook_url: ${SLACK_WEBHOOK_URL}
  provision_failure_webhook_url: ${SLACK_WEBHOOK_URL}

  # promote_success_webhook_url: ${SLACK_WEBHOOK_URL}
  promote_failure_webhook_url: ${SLACK_WEBHOOK_URL}

hooks:
  pre_pack:
  - dockerfile: hooks/pre-pack
    environment:
      VPC_ID:
      SUBNET_ID:
      SLACK_WEBHOOK_URL:
      EXTERNAL_ACCESS_CIDR:
      TEST_REPO_URL:
      TEST_REPO_BRANCH:
      ELB_1_NAME:
      ELB_2_NAME:
      DEPLOYMENT_ROLE_ARN:
      SSH_KEY:
      AWS_REGION:
  # post_pack:
  # - dockerfile: hooks/post-pack-fail
  #   run_condition: always
  # - repo: ${TEST_REPO_URL}
  #   ref: ${TEST_REPO_BRANCH}
  #   dockerfile: testintegration/plugins/post-pack
  #   concurrent: true
  # - repo: ${TEST_REPO_URL}
  #   ref: ${TEST_REPO_BRANCH}
  #   dockerfile: testintegration/plugins/post-pack
  #   concurrent: true
  # - repo: ${TEST_REPO_URL}
  #   ref: ${TEST_REPO_BRANCH}
  #   dockerfile: testintegration/plugins/post-pack
  #   concurrent: true
  # - repo: ${TEST_REPO_URL}
  #   ref: ${TEST_REPO_BRANCH}
  #   dockerfile: testintegration/plugins/post-pack
  ec2_bootstrap:
  - dockerfile: hooks/ec2-bootstrap
    concurrent: true
    environment:
      DEV_MODE:
      FOO: bar
  # - dockerfile: hooks/ec2-bootstrap
  #   concurrent: true
  #   environment:
  #     DEV_MODE:
  #     FOO: bar
  user_defined:
  - dockerfile: hooks/user-defined
  - repo: ${TEST_REPO_URL}
    ref: ${TEST_REPO_BRANCH}
    dockerfile: testintegration/plugins/user-defined

_container_base_inet: &CONTAINER_BASE_INET
  name: inet
  topology: inet
  inet_port: 3000
  dockerfile: Dockerfile.inet
  dockerfile_build: Dockerfile.inet.build
  health_check:
    method: GET
    path: /custom_health_check

_container_base_worker: &CONTAINER_BASE_WORKER
  name: worker
  topology: worker
  dockerfile: Dockerfile.inet
  dockerfile_build: Dockerfile.inet.build

environments:
- name: CustomVPC

  stack_definition_path: vpc.json
  hot_swap: true

  instance_type: m4.large

  haproxy:
    request_header_captures:
    - header: X-Request-Id
      length: 40
    - header: X-Forwarded-For
      length: 45

    response_header_captures:
    - header: X-Request-Id
      length: 40

  regions:
  - name: ${AWS_REGION}

    azs:
    - name: ${AWS_REGION}a
      subnet_id: ${SUBNET_ID}

    vpc_id: ${VPC_ID}
    role_arn: ${DEPLOYMENT_ROLE_ARN}
    s3_bucket: porter-sandbox-${AWS_REGION}
    key_pair_name: ${SSH_KEY}

    auto_scaling_group:
      secrets_exec_name: echo
      secrets_exec_args:
      - hi

    containers:
    - <<: *CONTAINER_BASE_INET
      src_env_file:
        exec_name: cat
        exec_args:
        - secrets.env-file
    # - <<: *CONTAINER_BASE_INET
    #   name: inet2
    #   src_env_file:
    #     exec_name: cat
    #     exec_args:
    #     - secrets.env-file
    # - <<: *CONTAINER_BASE_WORKER
    #   read_only: false
    # - <<: *CONTAINER_BASE_WORKER
    #   name: worker2
    #   read_only: true
    # - <<: *CONTAINER_BASE_WORKER
    #   name: worker3

    elb: ${ELB_1_NAME}

- name: Worker

  stack_definition_path: vpc.json

  instance_type: t2.medium

  regions:
  - name: ${AWS_REGION}

    azs:
    - name: ${AWS_REGION}a
      subnet_id: ${SUBNET_ID}

    vpc_id: ${VPC_ID}
    role_arn: ${DEPLOYMENT_ROLE_ARN}
    s3_bucket: porter-sandbox-${AWS_REGION}
    key_pair_name: ${SSH_KEY}

    containers:
    - <<: *CONTAINER_BASE_WORKER
    - <<: *CONTAINER_BASE_WORKER
      name: worker2

- name: CIS

  stack_definition_path: cis_ami.json

  instance_type: t2.medium

  regions:
  - name: ${AWS_REGION}

    azs:
    - name: ${AWS_REGION}a
      subnet_id: ${SUBNET_ID}

    vpc_id: ${VPC_ID}
    role_arn: ${DEPLOYMENT_ROLE_ARN}
    s3_bucket: porter-sandbox-${AWS_REGION}
    key_pair_name: ${SSH_KEY}

    containers:
    - <<: *CONTAINER_BASE_INET
      src_env_file:
        s3_bucket: porter-sandbox-${AWS_REGION}
        s3_key: env-file
        s3_region: ${AWS_REGION}
    - <<: *CONTAINER_BASE_WORKER
    - <<: *CONTAINER_BASE_WORKER
      name: worker2

    elb: ${ELB_2_NAME}
